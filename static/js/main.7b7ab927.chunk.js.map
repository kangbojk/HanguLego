{"version":3,"sources":["components/ItemTypes.tsx","components/Sound.tsx","components/Brick.tsx","components/Source.tsx","components/Target.tsx","components/Footer.tsx","components/HanguLego.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ItemTypes","useAudio","url","useState","Audio","audio","playing","setPlaying","useEffect","play","pause","addEventListener","removeEventListener","AudioMap","hangulJSON","style","margin","cursor","position","Brick","props","id","hangul","top","left","from","fill","stroke","audioURL","toggleAudio","useDrag","type","item","collect","monitor","isDragging","drag","backgroundColor","color","opacity","ref","AreEqual","prev","next","consonants","vowels","Source","memo","c19","split","map","v21","padding","display","btnStyle","Target","params","hanguls","setHanguls","uniqueKey","useRef","word","moveHangul","useCallback","update","$merge","useDrop","accept","drop","idx","current","prevState","addHangul","delta","getDifferenceFromInitialOffset","Math","round","x","y","isOver","letters","combineHangul","key","push","hanguljs","wordURL","msg","SpeechSynthesisUtterance","lang","rate","name","content","onClick","window","speechSynthesis","speak","linkStyle","Footer","marginTop","href","target","rel","HanguLego","DndProvider","backend","HTML5Backend","App","className","Helmet","property","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7b7ab927.chunk.js","sourcesContent":["export const ItemTypes = {\r\n\tHANGUL: 'hangul',\r\n}\r\n","import { useState, useEffect } from \"react\";\r\nimport hangulJSON from \"./scrapper/hangul.json\";\r\n\r\nexport interface audioFn {\r\n  (): void;\r\n}\r\n\r\nconst useAudio = (url: string) => {\r\n  // Hint Gatsby Audio type\r\n  // const [audio] = useState(typeof Audio !== \"undefined\" && new Audio(url));\r\n  const [audio] = useState(new Audio(url));\r\n  const [playing, setPlaying] = useState(false);\r\n\r\n  const toggle: audioFn = () => setPlaying(!playing);\r\n\r\n  useEffect(() => {\r\n    playing ? audio.play() : audio.pause();\r\n  }, [playing, audio]);\r\n\r\n  useEffect(() => {\r\n    audio.addEventListener(\"ended\", () => setPlaying(false));\r\n    return () => {\r\n      audio.removeEventListener(\"ended\", () => setPlaying(false));\r\n    };\r\n  }, [audio]);\r\n\r\n  return toggle;\r\n};\r\n\r\nexport default useAudio;\r\n\r\nexport const AudioMap: { [key: string]: string } = hangulJSON;\r\n","import { useDrag } from \"react-dnd\";\r\nimport { ItemTypes } from \"./ItemTypes\";\r\nimport { CSSProperties, useEffect } from \"react\";\r\n\r\nimport useAudio, { AudioMap } from \"./Sound\";\r\n\r\nexport interface BrickProps {\r\n  hangul: string;\r\n  left: number;\r\n  top: number;\r\n  from: string;\r\n  id: string;\r\n}\r\n\r\nconst style: CSSProperties = {\r\n  margin: 6,\r\n  cursor: \"move\",\r\n  position: \"relative\",\r\n};\r\n\r\nexport default function Brick(props: BrickProps) {\r\n  const { id, hangul, top, left, from } = props;\r\n  const fill = \"black\";\r\n  const stroke = \"white\";\r\n\r\n  const audioURL: string = AudioMap[hangul];\r\n  const toggleAudio = useAudio(audioURL);\r\n\r\n  //  pass required variables to drop target in dependency list\r\n  const [{ isDragging }, drag] = useDrag(\r\n    () => ({\r\n      type: ItemTypes.HANGUL,\r\n      item: { id, hangul, top, left, from },\r\n      collect: (monitor) => ({ isDragging: !!monitor.isDragging() }),\r\n    }),\r\n    [id, top, left, from]\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (audioURL && toggleAudio && isDragging) toggleAudio();\r\n  }, [isDragging, audioURL, toggleAudio]);\r\n\r\n  // add offset for movable brick\r\n  if (from === \"target\") {\r\n    return (\r\n      <div\r\n        style={{\r\n          ...style,\r\n          backgroundColor: fill,\r\n          color: stroke,\r\n          opacity: isDragging ? 0.5 : 1,\r\n          left,\r\n          top,\r\n        }}\r\n        ref={drag}\r\n      >\r\n        {hangul}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // oiginal bricks in source\r\n  return (\r\n    <div\r\n      style={{\r\n        ...style,\r\n        backgroundColor: fill,\r\n        color: stroke,\r\n        margin: 6,\r\n      }}\r\n      ref={drag}\r\n    >\r\n      {hangul}\r\n    </div>\r\n  );\r\n}\r\n","import { memo } from \"react\";\r\nimport Brick from \"./Brick\";\r\n\r\nexport interface SourceProps {\r\n    consonants: string\r\n    vowels: string\r\n}\r\n\r\nfunction AreEqual(prev: SourceProps, next: SourceProps) {\r\n    return prev.consonants === next.consonants && prev.vowels === next.vowels;\r\n}\r\n\r\nexport const Source = memo(function Source({ consonants, vowels }) {\r\n    // id will be set after dropped\r\n    const c19 = consonants.split(\" \").map((hangul) => <Brick key={hangul} id={''} hangul={hangul} left={0} top={0} from=\"source\" />)\r\n    const v21 = vowels.split(\" \").map((hangul) => <Brick key={hangul} id={''} hangul={hangul} left={0} top={0} from=\"source\" />)\r\n    return (\r\n        <div style={{\r\n            backgroundColor: 'gray',\r\n            margin: 12,\r\n            padding: 12,\r\n        }}>\r\n\r\n            <div>\r\n                <div style={{\r\n                    display: 'flex'\r\n                }}>\r\n                    <span>Consonants</span>\r\n                    {c19}\r\n                </div>\r\n\r\n                <div style={{\r\n                    display: 'flex'\r\n                }}>\r\n                    <span>Vowels</span>\r\n                    {v21}\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n    , AreEqual)","import { useState, CSSProperties, useRef, useCallback } from \"react\";\r\nimport { DropTargetMonitor, useDrop, XYCoord } from \"react-dnd\";\r\nimport { ItemTypes } from \"./ItemTypes\";\r\nimport update from \"immutability-helper\";\r\nimport Brick from \"./Brick\";\r\n\r\nimport * as hanguljs from \"hangul-js\";\r\n\r\nexport interface TargetProps {}\r\n\r\ninterface DragItem {\r\n  id: string;\r\n  from: string;\r\n  hangul: string;\r\n  top: number;\r\n  left: number;\r\n}\r\n\r\nconst btnStyle: CSSProperties = {\r\n  margin: 2,\r\n};\r\n\r\nexport default function Target(params: TargetProps) {\r\n  const [hanguls, setHanguls] = useState<{\r\n    [key: string]: {\r\n      top: number;\r\n      left: number;\r\n      from: string;\r\n      hangul: string;\r\n      id: string;\r\n    };\r\n  }>({});\r\n\r\n  // local variable resets to 0 after render\r\n  // useRef stores the previous vale\r\n  const uniqueKey = useRef(0);\r\n\r\n  function addHangul(hangul: string, top: number, left: number) {\r\n    const idx = `${hangul}${uniqueKey.current++}`;\r\n\r\n    setHanguls((prevState) => ({\r\n      ...prevState,\r\n\r\n      // use \"hangul+idx\" as key, so word like 밥 can have duplicate letters ㅂ\r\n      [idx]: {\r\n        top: top,\r\n        left: left,\r\n        from: \"target\",\r\n        hangul: hangul,\r\n        id: idx,\r\n      },\r\n    }));\r\n  }\r\n\r\n  // cache moveHangul during re-rendering, ie: dragging hangul to modify position in Target box\r\n  const moveHangul = useCallback(\r\n    (id: string, left: number, top: number) => {\r\n      setHanguls(update(hanguls, { [id]: { $merge: { left, top } } }));\r\n    },\r\n    [hanguls, setHanguls]\r\n  );\r\n\r\n  const [{ isOver }, drop] = useDrop({\r\n    accept: ItemTypes.HANGUL,\r\n    drop(item: DragItem, monitor: DropTargetMonitor) {\r\n      if (item.from === \"source\") addHangul(item.hangul, item.top, item.left);\r\n      else {\r\n        const delta = monitor.getDifferenceFromInitialOffset() as XYCoord;\r\n        const left = Math.round(item.left + delta.x);\r\n        const top = Math.round(item.top + delta.y);\r\n        moveHangul(item.id, left, top);\r\n      }\r\n    },\r\n    collect: (monitor) => ({ isOver: !!monitor.isOver() }),\r\n  });\r\n\r\n  let letters = [];\r\n  let word = \"\";\r\n  const combineHangul = [];\r\n  for (let key in hanguls) {\r\n    combineHangul.push(\r\n      <Brick\r\n        key={key}\r\n        id={key}\r\n        hangul={hanguls[key].hangul}\r\n        left={hanguls[key].left}\r\n        top={hanguls[key].top}\r\n        from=\"target\"\r\n      />\r\n    );\r\n    letters.push(hanguls[key].hangul);\r\n  }\r\n  word = hanguljs.assemble(letters);\r\n\r\n  const wordURL = `https://translate.google.com/translate_tts?ie=UTF-8&client=tw-ob&q=${word}&tl=ko-KR`;\r\n\r\n  const msg = new SpeechSynthesisUtterance(word);\r\n  msg.lang = \"ko-KR\";\r\n  msg.rate = 0.5;\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        backgroundColor: isOver ? \"rgb(182, 199, 151)\" : \"gray\",\r\n        margin: 12,\r\n        padding: 12,\r\n      }}\r\n      ref={drop}\r\n    >\r\n      <meta name=\"referrer\" content=\"no-referrer\"></meta>\r\n      <h2>\r\n        <span\r\n          style={{ cursor: \"pointer\" }}\r\n          onClick={() => {\r\n            window.speechSynthesis.speak(msg);\r\n          }}\r\n        >\r\n          👉\r\n        </span>{\" \"}\r\n        {word}\r\n      </h2>\r\n      <div style={{ display: \"flex\", position: \"relative\" }}>\r\n        {combineHangul}\r\n      </div>\r\n      <button style={btnStyle} onClick={() => setHanguls({})}>\r\n        Clear\r\n      </button>\r\n      <button\r\n        style={btnStyle}\r\n        onClick={() => {\r\n          const togglePronunciation = new Audio(wordURL);\r\n          togglePronunciation.play();\r\n        }}\r\n      >\r\n        ▶\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n","import { CSSProperties } from \"react\";\r\n\r\nconst linkStyle: CSSProperties = {\r\n    margin: 6,\r\n    color: \"white\",\r\n}\r\n\r\nexport default function Footer() {\r\n    return (\r\n        <div style={{\r\n            marginTop: \"150px\",\r\n        }}>\r\n            <a style={linkStyle} href=\"https://www.carryou.dev/\"> Back to Carryou</a>\r\n            <a style={linkStyle} href=\"https://github.com/kangbojk/HanguLego\" target=\"_blank\" rel=\"noreferrer\">Help improve HanguLego</a>\r\n        </div>\r\n    )\r\n\r\n}","import { DndProvider } from 'react-dnd'\r\nimport { HTML5Backend } from 'react-dnd-html5-backend'\r\n\r\nimport { Source } from './Source';\r\nimport Target from './Target';\r\nimport Footer from './Footer';\r\n\r\nexport default function HanguLego() {\r\n    return (<DndProvider backend={HTML5Backend}>\r\n\r\n        <h2>HanguLego</h2>\r\n\r\n        <Source consonants=\"ㄱ ㄴ ㄷ ㄹ ㅁ ㅂ ㅅ ㅇ ㅈ ㅊ ㅋ ㅌ ㅍ ㅎ ㄲ ㄸ ㅃ ㅆ ㅉ\" vowels=\"ㅏ ㅐ ㅑ ㅒ ㅓ ㅔ ㅕ ㅖ ㅗ ㅘ ㅙ ㅚ ㅛ ㅜ ㅝ ㅞ ㅟ ㅠ ㅡ ㅢ ㅣ\" />\r\n        <Target />\r\n        <Footer />\r\n\r\n    </DndProvider>)\r\n}","import \"./App.css\";\nimport HanguLego from \"./components/HanguLego\";\nimport { Helmet } from \"react-helmet\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Helmet>\n        <title>HanguLego</title>\n        <link rel=\"canonical\" href=\"https://kangbojk.github.io/HanguLego/\" />\n        <meta\n          name=\"description\"\n          content=\"Drag colorful bricks to learn Korean words like playing LEGO\"\n        />\n        <meta\n          name=\"keywords\"\n          content=\"Carryou, 帶你飛, Hangul, Hangul Lego, hangulego, carry you\"\n        />\n        <meta property=\"site_name\" content=\"Carryou 帶你飛\"></meta>\n        <meta property=\"og:site_name\" content=\"Carryou 帶你飛\"></meta>\n        <meta property=\"og:title\" content=\"HanguLego\"></meta>\n        <meta\n          property=\"og:url\"\n          content=\"https://kangbojk.github.io/HanguLego/\"\n        ></meta>\n        <meta\n          property=\"og:image\"\n          content=\"https://repository-images.githubusercontent.com/393237880/01165450-e5af-4a69-9465-7d83c7c2e00f\"\n        />\n        <meta\n          property=\"og:description\"\n          content=\"Drag colorful bricks to learn Korean words like playing LEGO\"\n        ></meta>\n        <meta name=\"twitter:title\" content=\"HanguLego\"></meta>\n        <meta\n          name=\"twitter:description\"\n          content=\"Drag colorful bricks to learn Korean words like playing LEGO\"\n        ></meta>\n      </Helmet>\n\n      <header className=\"App-header\">\n        <HanguLego />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}