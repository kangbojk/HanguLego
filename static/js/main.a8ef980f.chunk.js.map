{"version":3,"sources":["components/ItemTypes.tsx","components/Sound.tsx","components/Brick.tsx","components/Source.tsx","components/Target.tsx","components/Footer.tsx","components/HanguLego.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ItemTypes","useAudio","url","useState","Audio","audio","playing","setPlaying","useEffect","play","pause","addEventListener","removeEventListener","AudioMap","hangulJSON","style","margin","cursor","position","Brick","props","hangul","top","left","from","fill","stroke","audioURL","toggleAudio","useDrag","type","item","collect","monitor","isDragging","drag","backgroundColor","color","opacity","ref","AreEqual","prev","next","consonants","vowels","Source","memo","c19","split","map","v21","padding","display","btnStyle","Target","params","hanguls","setHanguls","uniqueKey","useRef","word","moveHangul","useCallback","id","update","$merge","useDrop","accept","drop","idx","current","prevState","addHangul","delta","getDifferenceFromInitialOffset","Math","round","x","y","isOver","letters","combineHangul","key","push","hanguljs","wordURL","togglePronunciation","msg","SpeechSynthesisUtterance","lang","rate","name","content","onClick","window","speechSynthesis","speak","linkStyle","Footer","marginTop","href","target","rel","HanguLego","DndProvider","backend","HTML5Backend","App","className","Helmet","property","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a8ef980f.chunk.js","sourcesContent":["export const ItemTypes = {\r\n\tHANGUL: 'hangul',\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport hangulJSON from \"./scrapper/hangul.json\"\r\n\r\nexport interface audioFn {\r\n    (): void\r\n}\r\n\r\nconst useAudio = (url: string) => {\r\n\r\n    // Hint Gatsby Audio type\r\n    // const [audio] = useState(typeof Audio !== \"undefined\" && new Audio(url));\r\n    const [audio] = useState(new Audio(url));\r\n    const [playing, setPlaying] = useState(false);\r\n\r\n    const toggle: audioFn = () => setPlaying(!playing);\r\n\r\n    useEffect(() => {\r\n        playing ? audio.play() : audio.pause();\r\n    },\r\n        [playing]\r\n    );\r\n\r\n    useEffect(() => {\r\n        audio.addEventListener('ended', () => setPlaying(false));\r\n        return () => {\r\n            audio.removeEventListener('ended', () => setPlaying(false));\r\n        };\r\n    }, []);\r\n\r\n    return toggle\r\n};\r\n\r\nexport default useAudio\r\n\r\nexport const AudioMap: { [key: string]: string } = hangulJSON","import { useDrag } from 'react-dnd';\r\nimport { ItemTypes } from './ItemTypes';\r\nimport { CSSProperties, useEffect } from 'react';\r\n\r\nimport useAudio, { AudioMap } from './Sound'\r\n\r\nexport interface BrickProps {\r\n    hangul: string\r\n    left: number\r\n    top: number\r\n    from: string\r\n    id?: string\r\n}\r\n\r\nconst style: CSSProperties = {\r\n    margin: 6,\r\n    cursor: 'move',\r\n    position: 'relative',\r\n}\r\n\r\nexport default function Brick(props: BrickProps) {\r\n    const { hangul, top, left, from } = props;\r\n    const fill = 'black'\r\n    const stroke = 'white'\r\n\r\n    const audioURL: string = AudioMap[hangul]\r\n    const toggleAudio = useAudio(audioURL);\r\n\r\n    //  pass offset variables to drop target\r\n    const [{ isDragging }, drag] = useDrag(\r\n        () => ({\r\n            type: ItemTypes.HANGUL,\r\n            item: { hangul, top, left, from },\r\n            collect: (monitor) => ({ isDragging: !!monitor.isDragging() }),\r\n        }), [top, left, from]\r\n    )\r\n\r\n    useEffect(() => {\r\n        if (audioURL && toggleAudio && isDragging)\r\n            toggleAudio()\r\n    }, [isDragging])\r\n\r\n    // add offset for movable brick\r\n    if (from === \"target\") {\r\n        return (\r\n            <div\r\n                style={{\r\n                    ...style,\r\n                    backgroundColor: fill,\r\n                    color: stroke,\r\n                    opacity: isDragging ? 0.5 : 1,\r\n                    left,\r\n                    top,\r\n                }}\r\n                ref={drag}\r\n            >\r\n                {hangul}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    // oiginal bricks in source\r\n    return (\r\n        <div\r\n            style={{\r\n                ...style,\r\n                backgroundColor: fill,\r\n                color: stroke,\r\n                margin: 6,\r\n            }}\r\n            ref={drag}\r\n        >\r\n            {hangul}\r\n        </div>\r\n    )\r\n}\r\n\r\n","import { memo } from \"react\";\r\nimport Brick from \"./Brick\";\r\n\r\nexport interface SourceProps {\r\n    consonants: string\r\n    vowels: string\r\n}\r\n\r\nfunction AreEqual(prev: SourceProps, next: SourceProps) {\r\n    return prev.consonants === next.consonants && prev.vowels === next.vowels;\r\n}\r\n\r\nexport const Source = memo(function Source({ consonants, vowels }) {\r\n    const c19 = consonants.split(\" \").map((hangul) => <Brick key={hangul} hangul={hangul} left={0} top={0} from=\"source\" />)\r\n    const v21 = vowels.split(\" \").map((hangul) => <Brick key={hangul} hangul={hangul} left={0} top={0} from=\"source\" />)\r\n    return (\r\n        <div style={{\r\n            backgroundColor: 'gray',\r\n            margin: 12,\r\n            padding: 12,\r\n        }}>\r\n\r\n            <div>\r\n                <div style={{\r\n                    display: 'flex'\r\n                }}>\r\n                    <span>Consonants</span>\r\n                    {c19}\r\n                </div>\r\n\r\n                <div style={{\r\n                    display: 'flex'\r\n                }}>\r\n                    <span>Vowels</span>\r\n                    {v21}\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n    , AreEqual)","import { useState, CSSProperties, useRef, useCallback, useEffect } from \"react\";\r\nimport { DropTargetMonitor, useDrop, XYCoord } from \"react-dnd\";\r\nimport { ItemTypes } from \"./ItemTypes\";\r\nimport { DragItem } from \"./interfaces\"\r\nimport update from 'immutability-helper'\r\nimport Brick from \"./Brick\";\r\n\r\nimport * as hanguljs from 'hangul-js';\r\n\r\nexport interface TargetProps {\r\n}\r\n\r\nconst btnStyle: CSSProperties = {\r\n    margin: 2,\r\n}\r\n\r\n\r\nexport default function Target(params: TargetProps) {\r\n    const [hanguls, setHanguls] = useState<{\r\n        [key: string]: {\r\n            top: number\r\n            left: number\r\n            from: string\r\n            hangul: string\r\n            id: string\r\n        }\r\n    }>({})\r\n\r\n    // local variable resets to 0 after render\r\n    // useRef stores the previous vale\r\n    const uniqueKey = useRef(0);\r\n\r\n    function addHangul(hangul: string, top: number, left: number) {\r\n\r\n        const idx = `${hangul}${uniqueKey.current++}`\r\n\r\n        //check for duplicate?\r\n\r\n        setHanguls(prevState => ({\r\n            ...prevState,\r\n\r\n            // use hangul as key for the time being -> no duplicate?\r\n            [hangul]: {\r\n                top: top,\r\n                left: left,\r\n                from: \"target\",\r\n                hangul: hangul,\r\n                id: idx\r\n            }\r\n\r\n        }));\r\n    }\r\n\r\n    //why useCallback -> store coord?\r\n    const moveHangul = useCallback(\r\n        (id: string, left: number, top: number) => {\r\n            setHanguls(\r\n                update(hanguls, { [id]: { $merge: { left, top } } })\r\n            )\r\n        }, [hanguls, setHanguls]\r\n    )\r\n\r\n    const [{ isOver }, drop] = useDrop({\r\n        accept: ItemTypes.HANGUL,\r\n        drop(item: DragItem, monitor: DropTargetMonitor) {\r\n\r\n            if (item.from == \"source\")\r\n                addHangul(item.hangul, item.top, item.left)\r\n            else {\r\n                const delta = monitor.getDifferenceFromInitialOffset() as XYCoord\r\n                const left = Math.round(item.left + delta.x)\r\n                const top = Math.round(item.top + delta.y)\r\n                moveHangul(item.hangul, left, top)\r\n            }\r\n\r\n        },\r\n        collect: monitor => ({ isOver: !!monitor.isOver() }),\r\n    })\r\n\r\n    let letters = []\r\n    let word = \"\"\r\n    const combineHangul = []\r\n    for (let key in hanguls) {\r\n        combineHangul.push(\r\n            <Brick key={hanguls[key].id} hangul={hanguls[key].hangul} left={hanguls[key].left} top={hanguls[key].top} from=\"target\" />\r\n        )\r\n        letters.push(key)\r\n    }\r\n    word = hanguljs.assemble(letters)\r\n\r\n    let wordURL = `https://translate.google.com/translate_tts?ie=UTF-8&client=tw-ob&q=${word}&tl=ko-KR`\r\n    let togglePronunciation = new Audio(wordURL);\r\n    // useEffect(() => {\r\n    //     togglePronunciation.src = wordURL\r\n    // }, [word])\r\n\r\n    const msg = new SpeechSynthesisUtterance(word);\r\n    msg.lang = \"ko-KR\"\r\n    msg.rate = 0.5\r\n\r\n    return (\r\n        <div style={{\r\n            backgroundColor: isOver ? 'rgb(182, 199, 151)' : 'gray',\r\n            margin: 12,\r\n            padding: 12,\r\n        }} ref={drop}>\r\n            <meta name=\"referrer\" content=\"no-referrer\"></meta>\r\n            <h2 ><span style={{ cursor: 'pointer', }} onClick={() => { window.speechSynthesis.speak(msg); }}>👉</span> {word}</h2>\r\n            <div style={{ display: 'flex', position: 'relative', }} >\r\n                {combineHangul}\r\n            </div>\r\n            <button style={btnStyle} onClick={() => setHanguls({})}>\r\n                Clear\r\n            </button>\r\n            <button style={btnStyle} onClick={() => togglePronunciation.play()}>\r\n                ▶\r\n            </button>\r\n        </div>\r\n    )\r\n}","import { CSSProperties } from \"react\";\r\n\r\nconst linkStyle: CSSProperties = {\r\n    margin: 6,\r\n    color: \"white\",\r\n}\r\n\r\nexport default function Footer() {\r\n    return (\r\n        <div style={{\r\n            marginTop: \"150px\",\r\n        }}>\r\n            <a style={linkStyle} href=\"https://www.carryou.dev/\"> Back to Carryou</a>\r\n            <a style={linkStyle} href=\"https://github.com/kangbojk/HanguLego\" target=\"_blank\" rel=\"noreferrer\">Help improve HanguLego</a>\r\n        </div>\r\n    )\r\n\r\n}","import { DndProvider } from 'react-dnd'\r\nimport { HTML5Backend } from 'react-dnd-html5-backend'\r\n\r\nimport { Source } from './Source';\r\nimport Target from './Target';\r\nimport Footer from './Footer';\r\n\r\nexport default function HanguLego() {\r\n    return (<DndProvider backend={HTML5Backend}>\r\n\r\n        <h2>HanguLego</h2>\r\n\r\n        <Source consonants=\"ㄱ ㄴ ㄷ ㄹ ㅁ ㅂ ㅅ ㅇ ㅈ ㅊ ㅋ ㅌ ㅍ ㅎ ㄲ ㄸ ㅃ ㅆ ㅉ\" vowels=\"ㅏ ㅐ ㅑ ㅒ ㅓ ㅔ ㅕ ㅖ ㅗ ㅘ ㅙ ㅚ ㅛ ㅜ ㅝ ㅞ ㅟ ㅠ ㅡ ㅢ ㅣ\" />\r\n        <Target />\r\n        <Footer />\r\n\r\n    </DndProvider>)\r\n}","import './App.css';\nimport HanguLego from './components/HanguLego';\nimport { Helmet } from 'react-helmet';\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <Helmet>\n        <title>HanguLego</title>\n        <link rel=\"canonical\" href=\"https://hangulego.carryou.dev/\" />\n        <meta name=\"description\" content=\"Drag colorful bricks to learn Korean words like playing LEGO\" />\n        <meta name=\"keywords\" content=\"Carryou, 帶你飛, Hangul, Hangul Lego, hangulego, carry you\" />\n        <meta property=\"site_name\" content=\"Carryou 帶你飛\"></meta>\n        <meta property=\"og:site_name\" content=\"Carryou 帶你飛\"></meta>\n        <meta property=\"og:title\" content=\"HanguLego\"></meta>\n        <meta property=\"og:url\" content=\"https://hangulego.carryou.dev/\"></meta>\n        <meta property=\"og:image\" content=\"https://repository-images.githubusercontent.com/393237880/01165450-e5af-4a69-9465-7d83c7c2e00f\" />\n        <meta property=\"og:description\" content=\"Drag colorful bricks to learn Korean words like playing LEGO\"></meta>\n        <meta name=\"twitter:title\" content=\"HanguLego\"></meta>\n        <meta name=\"twitter:description\" content=\"Drag colorful bricks to learn Korean words like playing LEGO\"></meta>\n      </Helmet>\n\n      <header className=\"App-header\">\n        <HanguLego />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}